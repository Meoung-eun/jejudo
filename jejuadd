import pymysql
import sys
from PyQt5.QtWidgets import *
from PyQt5 import uic
from jejuForm import Add
from PyQt5 import QtWidgets, QtCore


form_class = uic.loadUiType("jeju.ui")[0]  # ui연결

class MainWindow(QMainWindow, form_class): #화면을 띄우는데 사용되는 Class 선언
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.jejuFormShow = Add()   # Add클래스를 self.jejuFormShow로 선언

        self.table_widget_create()  # 테이블위젯 안에 데이터 생성
        self.btn_search.clicked.connect(self.search)    # 검색 버튼
        self.btn_edit.clicked.connect(self.edit)        # 수정 버튼
        self.btn_add.clicked.connect(self.add)          # 추가 버튼
        self.jejuFormShow.btn_save.clicked.connect(self.add2) # 추가폼 저장버튼



    def table_widget_create(self):
        self.checkboxList = []  # 체크박스 넣을 빈 리스트 만들기
        ## sql파일 커넥트
        conn = pymysql.connect(host='localhost', user='root', password='160072', db='jejudo', charset='utf8')   # password 변경 해주세요
        ## conn로부터  결과를 얻어올 때 사용할 Cursor 생성
        cur = conn.cursor()
        ## SQL문 실행
        sql = "select * from jejudo.jeju_table"
        cur.execute(sql)
        print(cur.execute(sql))   # 실행(excute) 했더니 10884줄이 나온다.
        ## 데이타 Fetch
        # row = cur.fetchone()
        # print(row) # ('카페송키','일반음식점..) 한 행이 튜플형태로 나온다.
        rows = cur.fetchall()
        # print(rows) # 튜플안에 튜플로 전체 데이터를 불러온다.
        self.table.setRowCount(len(rows)) # 테이블의 행 갯수를 rows의 길이로 정함
        self.table.setColumnCount(len(rows[0])+1)  # 테이블의 열 갯수를 rows[0]의 길이로 정함

        # 데이터베이스 전체를 테이블에 넣어주는 반복문
        for i in range(len(rows)):
            for j in range(len(rows[0])):
                self.table.setItem(i, j, QTableWidgetItem(str(rows[i][j])))


        # 체크박스 리스트 데이터 갯수만큼 만들어줌
        for i in range(len(rows)):
            ckBox = QCheckBox()
            self.checkboxList.append(ckBox)

        # 테이블 위젯 마지막 열에 체크박스 넣어줄 반복문
        for i in range(len(rows)):
            self.table.setCellWidget(i,16,self.checkboxList[i])

        # Connection 닫기
        conn.close()

    def search(self):
        self.table_widget_create()
        self.checkboxList = []  # 체크박스 넣을 빈 리스트 만들기
        self.table.clearContents()
        conn = pymysql.connect(host='localhost', user='root', password='160072', db='jejudo',
                               charset='utf8')
        cur = conn.cursor()
        data = self.lineEdit.text()
        data2 = f"%{data}%"
        sql = "SELECT * FROM jejudo.jeju_table WHERE full_address like %s"
        cur.execute(sql, data2)
        rows = cur.fetchall()
        self.table.setRowCount(len(rows)) # 테이블의 행 갯수를 rows의 길이로 정함
        self.table.setColumnCount(len(rows[0])+1)  # 테이블의 열 갯수를 rows[0]의 길이로 정함

        # 데이터베이스 전체를 테이블에 넣어주는 반복문
        for i in range(len(rows)):
            for j in range(len(rows[0])):
                self.table.setItem(i, j, QTableWidgetItem(str(rows[i][j])))


        # 체크박스 리스트 데이터 갯수만큼 만들어줌
        for i in range(len(rows)):
            ckBox = QCheckBox()
            self.checkboxList.append(ckBox)

        # 테이블 위젯 마지막 열에 체크박스 넣어줄 반복문
        for i in range(len(rows)):
            self.table.setCellWidget(i,16,self.checkboxList[i])

        # Connection 닫기
        conn.commit()
        conn.close()

    def edit(self):
        print('수정')
        self.jejuFormShow.show()    # 수정버튼 누르면 폼창이 뜬다.

    def add(self):
        print('추가')
        self.jejuFormShow.show()    # 추가버튼 누르면 폼창이 뜬다.

    def add2(self): #추가버튼 누를 때 발생하는 함수
        self.rs_name = self.jejuFormShow.Restaurant_name.text()
        self.bs_typeA = self.jejuFormShow.Business_typeA.text()
        self.bs_typeB = self.jejuFormShow.Business_typeB.text()
        self.auth_date = self.jejuFormShow.Authorized_date.text()
        # self.cel_date = self.jejuFormShow.Cancel_date.text()
        # self.State = self.jejuFormShow.State.text()
        # self.st_detail = self.jejuFormShow.state_detail.text()
        # self.clo_date = self.jejuFormShow.closing_date.text()
        # self.vac_start_date = self.jejuFormShow.vacation_start_date.text()
        # self.vac_end_date = self.jejuFormShow.vacation_end_date.text()

        # self.rest_date = self.jejuFormShow.restarting_date.text()
        # self.regi_square = self.jejuFormShow.region_square.text()
        # self.fu_address = self.jejuFormShow.full_address.text()
        # self.fu_address_new = self.jejuFormShow.full_address_new.text()
        # self.po = self.jejuFormShow.post.text()
        # self.upda_date = self.jejuFormShow.updated_date.text()

        confu = pymysql.connect(host='localhost', user='root', password='160072', db='jejudo', charset='utf8')
        curr = confu.cursor()
        curr.execute(f"INSERT INTO jejudo.jeju_table(Restaurant_name, Business_typeA, Business_typeB, Authorized_date ) VALUES ('{self.rs_name}', '{self.bs_typeA}', '{self.bs_typeB}', '{self.auth_date}')")
        confu.commit()
        curr.execute("update jeju_table set jeju_table.Restaurant_name = "" where jeju_table.Restaurant_name is NULL")
        curr.execute("update jeju_table set jeju_table.Business_typeA = "" where jeju_table.Business_typeA is NULL")
        curr.execute("update jeju_table set jeju_table.Business_typeB = "" where jeju_table.Business_typeB is NULL")
        curr.execute("update jeju_table set jeju_table.Authorized_date = "" where jeju_table.Authorized_date is NULL")
        curr.execute("update jeju_table set jeju_table.Cancel_date = "" where jeju_table.Cancel_date is NULL")
        curr.execute("update jeju_table set jeju_table.state = "" where jeju_table.state is NULL")
        curr.execute("update jeju_table set jeju_table.state_detail = "" where jeju_table.state_detail is NULL")
        curr.execute("update jeju_table set jeju_table.closing_date = "" where jeju_table.closing_date is NULL")
        curr.execute("update jeju_table set jeju_table.vacation_start_date = "" where jeju_table.vacation_start_date is NULL")  #
        curr.execute("update jeju_table set jeju_table.vacation_end_date = "" where jeju_table.vacation_end_date is NULL")
        curr.execute("update jeju_table set jeju_table.restarting_date = "" where jeju_table.restarting_date is NULL")
        curr.execute("update jeju_table set jeju_table.region_square = "" where jeju_table.region_square is NULL")
        curr.execute("update jeju_table set jeju_table.full_address = "" where jeju_table.full_address is NULL")
        curr.execute("update jeju_table set jeju_table.post = "" where jeju_table.post is NULL")

        curr.execute("select * from jejudo.jeju_table")


        # 데이터를 sql에 반영

        # Connection 닫기
        # confu.close()
        # 테이블 헤더를 제외한 데이터 삭제
        # self.table.clearContents()
        # 테이블 안에 데이터 생성
        # self.table_widget_create()

    def buttonFunction(self):
        print("btn_save Clicked")

if __name__ == "__main__":
    # QApplication : 프로그램을 실행시켜주는 클래스
    app = QApplication(sys.argv)

    # WindowClass의 인스턴스 생성
    mainWindow = MainWindow()

    # 프로그램 화면을 보여주는 코드
    mainWindow.show()

    # 프로그램을 이벤트루프로 진입시키는(프로그램을 작동시키는) 코드
    app.exec_()

